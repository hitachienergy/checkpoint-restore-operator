// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/api.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_CreateCheckpointImage_FullMethodName = "/api.Agent/CreateCheckpointImage"
	Agent_TransferCheckpoint_FullMethodName    = "/api.Agent/TransferCheckpoint"
	Agent_ExtractStats_FullMethodName          = "/api.Agent/ExtractStats"
	Agent_AcceptCheckpoint_FullMethodName      = "/api.Agent/AcceptCheckpoint"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	CreateCheckpointImage(ctx context.Context, in *CreateCheckpointImageRequest, opts ...grpc.CallOption) (*CreateCheckpointImageResponse, error)
	TransferCheckpoint(ctx context.Context, in *TransferCheckpointRequest, opts ...grpc.CallOption) (*TransferCheckpointResponse, error)
	ExtractStats(ctx context.Context, in *ExtractStatsRequest, opts ...grpc.CallOption) (*StatsEntry, error)
	AcceptCheckpoint(ctx context.Context, opts ...grpc.CallOption) (Agent_AcceptCheckpointClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) CreateCheckpointImage(ctx context.Context, in *CreateCheckpointImageRequest, opts ...grpc.CallOption) (*CreateCheckpointImageResponse, error) {
	out := new(CreateCheckpointImageResponse)
	err := c.cc.Invoke(ctx, Agent_CreateCheckpointImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) TransferCheckpoint(ctx context.Context, in *TransferCheckpointRequest, opts ...grpc.CallOption) (*TransferCheckpointResponse, error) {
	out := new(TransferCheckpointResponse)
	err := c.cc.Invoke(ctx, Agent_TransferCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ExtractStats(ctx context.Context, in *ExtractStatsRequest, opts ...grpc.CallOption) (*StatsEntry, error) {
	out := new(StatsEntry)
	err := c.cc.Invoke(ctx, Agent_ExtractStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AcceptCheckpoint(ctx context.Context, opts ...grpc.CallOption) (Agent_AcceptCheckpointClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_AcceptCheckpoint_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentAcceptCheckpointClient{stream}
	return x, nil
}

type Agent_AcceptCheckpointClient interface {
	Send(*AcceptCheckpointRequest) error
	CloseAndRecv() (*AcceptCheckpointResponse, error)
	grpc.ClientStream
}

type agentAcceptCheckpointClient struct {
	grpc.ClientStream
}

func (x *agentAcceptCheckpointClient) Send(m *AcceptCheckpointRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentAcceptCheckpointClient) CloseAndRecv() (*AcceptCheckpointResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AcceptCheckpointResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	CreateCheckpointImage(context.Context, *CreateCheckpointImageRequest) (*CreateCheckpointImageResponse, error)
	TransferCheckpoint(context.Context, *TransferCheckpointRequest) (*TransferCheckpointResponse, error)
	ExtractStats(context.Context, *ExtractStatsRequest) (*StatsEntry, error)
	AcceptCheckpoint(Agent_AcceptCheckpointServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) CreateCheckpointImage(context.Context, *CreateCheckpointImageRequest) (*CreateCheckpointImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckpointImage not implemented")
}
func (UnimplementedAgentServer) TransferCheckpoint(context.Context, *TransferCheckpointRequest) (*TransferCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCheckpoint not implemented")
}
func (UnimplementedAgentServer) ExtractStats(context.Context, *ExtractStatsRequest) (*StatsEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractStats not implemented")
}
func (UnimplementedAgentServer) AcceptCheckpoint(Agent_AcceptCheckpointServer) error {
	return status.Errorf(codes.Unimplemented, "method AcceptCheckpoint not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_CreateCheckpointImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckpointImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateCheckpointImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_CreateCheckpointImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateCheckpointImage(ctx, req.(*CreateCheckpointImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_TransferCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).TransferCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_TransferCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).TransferCheckpoint(ctx, req.(*TransferCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ExtractStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ExtractStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ExtractStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ExtractStats(ctx, req.(*ExtractStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AcceptCheckpoint_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).AcceptCheckpoint(&agentAcceptCheckpointServer{stream})
}

type Agent_AcceptCheckpointServer interface {
	SendAndClose(*AcceptCheckpointResponse) error
	Recv() (*AcceptCheckpointRequest, error)
	grpc.ServerStream
}

type agentAcceptCheckpointServer struct {
	grpc.ServerStream
}

func (x *agentAcceptCheckpointServer) SendAndClose(m *AcceptCheckpointResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentAcceptCheckpointServer) Recv() (*AcceptCheckpointRequest, error) {
	m := new(AcceptCheckpointRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCheckpointImage",
			Handler:    _Agent_CreateCheckpointImage_Handler,
		},
		{
			MethodName: "TransferCheckpoint",
			Handler:    _Agent_TransferCheckpoint_Handler,
		},
		{
			MethodName: "ExtractStats",
			Handler:    _Agent_ExtractStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AcceptCheckpoint",
			Handler:       _Agent_AcceptCheckpoint_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
