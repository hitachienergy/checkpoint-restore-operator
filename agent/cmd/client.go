package main

import (
	"context"
	"flag"
	"fmt"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"hitachienergy.com/cr-operator/agent/generated"
	"time"
)

var (
	address = flag.String("connect", "127.0.0.1:50051", "The server to connect to")

	command = flag.String("command", "create", "The command create or transfer")

	archiveDir     = flag.String("archiveDir", "", "Path of the checkpoint archive generated by kubelet")
	containerName  = flag.String("containerName", "", "Name of the container")
	checkpointName = flag.String("checkpointName", "checkpoint", "The name of the checkpoint")

	target = flag.String("target", "127.0.0.1:50051", "Target of the transfer")
)

func main() {
	flag.Parse()

	conn, err := grpc.Dial(*address, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		fmt.Println(err, "did not connect")
		return
	}
	fmt.Println("Got connection: ", conn.GetState().String())
	c := generated.NewAgentClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if *command == "create" {
		image, err := c.CreateCheckpointImage(ctx, &generated.CreateCheckpointImageRequest{
			CheckpointArchiveLocation: *archiveDir,
			ContainerName:             *containerName,
			CheckpointName:            *checkpointName,
		})
		if err != nil {
			fmt.Println(err, "CreateCheckpointImage failed")
			return
		}
		fmt.Println(image)
	} else if *command == "transfer" {
		checkpoint, err := c.TransferCheckpoint(ctx, &generated.TransferCheckpointRequest{
			CheckpointName: *checkpointName,
			TransferTo:     *target,
		})
		if err != nil {
			fmt.Println(err, "TransferCheckpoint failed")
			return
		}

		fmt.Println(checkpoint)
	}
}
